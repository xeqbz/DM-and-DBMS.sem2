--- Task 1 ---
CREATE TABLE GROUPS (
    ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100),
    C_VAL NUMBER DEFAULT 0
);

CREATE TABLE STUDENTS (
    ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100),
    GROUP_ID NUMBER
);

--- Task 2 ---
CREATE SEQUENCE GROUPS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE STUDENTS_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER GROUPS_BIR
BEFORE INSERT ON GROUPS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := GROUPS_SEQ.NEXTVAL;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER STUDENTS_BIR
BEFORE INSERT ON STUDENTS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := STUDENTS_SEQ.NEXTVAL;
    END IF;
END;
/

CREATE OR REPLACE PACKAGE PKG_GROUPS_VALIDATION IS
    TYPE t_name_table IS TABLE OF VARCHAR2(100) INDEX BY PLS_INTEGER;
    g_names t_name_table;
END PKG_GROUPS_VALIDATION;
/

CREATE OR REPLACE TRIGGER TRG_GROUPS_BEFORE
BEFORE INSERT OR UPDATE ON GROUPS
FOR EACH ROW
BEGIN
    PKG_GROUPS_VALIDATION.g_names(PKG_GROUPS_VALIDATION.g_names.COUNT + 1) := :NEW.NAME;
END;
/

CREATE OR REPLACE TRIGGER TRG_GROUPS_AFTER
AFTER INSERT OR UPDATE ON GROUPS
DECLARE
    v_count NUMBER;
BEGIN
    FOR i IN 1 .. PKG_GROUPS_VALIDATION.g_names.COUNT LOOP
        SELECT COUNT (*)
        INTO v_count
        FROM GROUPS
        WHERE NAME = PKG_GROUPS_VALIDATION.g_names(i);

        IF v_count > 1 THEN
            RAISE_APPLICATION_ERROR(-20001, 'Имя должно быть уникальным: ' || PKG_GROUPS_VALIDATION.g_names(i));
        END IF;
    END LOOP;

    PKG_GROUPS_VALIDATION.g_names.DELETE;
END;
/

--- Task 3 ---
CREATE OR REPLACE PACKAGE CASCADE_CTX AS
    g_is_cascade_delete BOOLEAN := FALSE;
END CASCADE_CTX;
/

CREATE OR REPLACE TRIGGER GROUPS_CASCADE_DELETE
BEFORE DELETE ON GROUPS
FOR EACH ROW
BEGIN
    CASCADE_CTX.g_is_cascade_delete := TRUE;
    DELETE FROM STUDENTS WHERE GROUP_ID = :OLD.ID;
    CASCADE_CTX.g_is_cascade_delete := FALSE;
EXCEPTION
    WHEN OTHERS THEN
        CASCADE_CTX.g_is_cascade_delete := FALSE;
        RAISE;
END;
/

--- Task 4 ---
CREATE TABLE STUDENTS_LOG (
    LOG_ID NUMBER PRIMARY KEY,
    ACTION_TYPE VARCHAR2(10),
    OLD_ID NUMBER,
    NEW_ID NUMBER,
    OLD_NAME VARCHAR2(255),
    NEW_NAME VARCHAR2(255),
    OLD_GROUP_ID NUMBER,
    NEW_GROUP_ID NUMBER,
    ACTION_TIME TIMESTAMP,
    USER_NAME VARCHAR2(255)
);

CREATE SEQUENCE STUDENTS_LOG_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER STUDENTS_AUDIT_LOG
AFTER INSERT OR UPDATE OR DELETE ON STUDENTS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO STUDENTS_LOG VALUES (
            STUDENTS_LOG_SEQ.NEXTVAL, 'INSERT',
            NULL, :NEW.ID, NULL, :NEW.NAME,
            NULL, :NEW.GROUP_ID, SYSTIMESTAMP, USER);
    ELSIF UPDATING THEN
        INSERT INTO STUDENTS_LOG VALUES (
            STUDENTS_LOG_SEQ.NEXTVAL, 'UPDATE',
            :OLD.ID, :NEW.ID, :OLD.NAME, :NEW.NAME,
            :OLD.GROUP_ID, :NEW.GROUP_ID, SYSTIMESTAMP, USER);
    ELSIF DELETING THEN
        INSERT INTO STUDENTS_LOG VALUES (
            STUDENTS_LOG_SEQ.NEXTVAL, 'DELETE',
            :OLD.ID, NULL, :OLD.NAME, NULL,
            :OLD.GROUP_ID, NULL, SYSTIMESTAMP, USER);
    END IF;
END;
/

--- Task 5 ---
CREATE OR REPLACE PROCEDURE RESTORE_STUDENTS (
    p_time TIMESTAMP DEFAULT NULL,
    p_offset INTERVAL DAY TO SECOND DEFAULT NULL
) IS
    v_restore_time TIMESTAMP;
BEGIN
    IF p_time IS NOT NULL THEN
        v_restore_time := p_time;
    ELSIF p_offset IS NOT NULL THEN
        v_restore_time := SYSTIMESTAMP - p_offset;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Необходимо указать либо p_time, либо p_offset.');
    END IF;

    FOR log IN (
        SELECT * FROM STUDENTS_LOG
        WHERE ACTION_TIME >= v_restore_time
        ORDER BY ACTION_TIME DESC, LOG_ID DESC
    )LOOP
        IF log.ACTION_TYPE = 'INSERT' THEN
            DELETE FROM STUDENTS  WHERE ID = log.NEW_ID;
        ELSIF log.ACTION_TYPE = 'DELETE' THEN
            INSERT INTO STUDENTS (ID, NAME, GROUP_ID)
            VALUES (log.OLD_ID, log.OLD_NAME, log.OLD_GROUP_ID);
        ELSIF log.ACTION_TYPE = 'UPDATE' THEN
            UPDATE STUDENTS SET
                NAME = log.OLD_NAME,
                GROUP_ID = log.OLD_GROUP_ID
            WHERE ID = log.OLD_ID;
        END IF;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('Данные восстановлены на: ' || v_restore_time);
END;
/

--- Task 6 ---
CREATE OR REPLACE TRIGGER UPDATE_CVAL
AFTER INSERT OR UPDATE OR DELETE ON STUDENTS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        BEGIN
            UPDATE GROUPS
            SET C_VAL = C_VAL + 1
            WHERE ID = :NEW.GROUP_ID;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('Группа ' || :NEW.GROUP_ID || ' не найдена.');
        END;
    ELSIF UPDATING THEN
        IF :OLD.GROUP_ID != :NEW.GROUP_ID THEN
            BEGIN
                UPDATE GROUPS
                SET C_VAL = C_VAL - 1
                WHERE ID = :OLD.GROUP_ID;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    NULL;
            END;

            BEGIN
                UPDATE GROUPS
                SET C_VAL = C_VAL + 1
                WHERE ID = :NEW.GROUP_ID;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('Группа ' || :NEW.GROUP_ID || ' не найдена.');
            END;
        END IF;
    ELSIF DELETING THEN
        IF NOT CASCADE_CTX.g_is_cascade_delete THEN
            BEGIN
                UPDATE GROUPS
                SET C_VAL = C_VAL - 1
                WHERE ID = :OLD.GROUP_ID;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('Группа ' || :OLD.GROUP_ID || ' не найдена.');
            END;
        END IF;
    END IF;
END;
/


INSERT INTO GROUPS (NAME, C_VAL) VALUES ('Group A', 0);
INSERT INTO GROUPS (NAME, C_VAL) VALUES ('Group B', 0);
INSERT INTO GROUPS (NAME, C_VAL) VALUES ('Group C', 0);

INSERT INTO STUDENTS (NAME, GROUP_ID) VALUES ('Ivan Ivanov', 1);
INSERT INTO STUDENTS (NAME, GROUP_ID) VALUES ('Maria Petrova', 1);
INSERT INTO STUDENTS (NAME, GROUP_ID) VALUES ('Alexey Sidorov', 2);
INSERT INTO STUDENTS (NAME, GROUP_ID) VALUES ('Olga Smirnova', 2);
INSERT INTO STUDENTS (NAME, GROUP_ID) VALUES ('Dmitry Kozlov', 4);
INSERT INTO STUDENTS (NAME, GROUP_ID) VALUES ('Anna Volkova', 4);

SELECT * FROM GROUPS;
SELECT * FROM STUDENTS;
SELECT * FROM STUDENTS_LOG;

DELETE FROM GROUPS WHERE ID = 1;
DELETE FROM GROUPS;
DELETE FROM STUDENTS;
DELETE FROM STUDENTS_LOG;

BEGIN
    restore_students(p_offset => INTERVAL '1' MINUTE);
END;
CREATE TABLE customers (
    customer_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    full_name   VARCHAR2(100) NOT NULL,
    status_code NUMBER,
    created_at  DATE DEFAULT SYSDATE,
    CONSTRAINT pk_customers PRIMARY KEY (customer_id)
);
DROP TABLE CUSTOMERS;

CREATE TABLE orders (
    order_id    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    customer_id NUMBER NOT NULL,
    order_date  DATE DEFAULT SYSDATE,
    comment_text VARCHAR2(200),
    amount      NUMBER,
    CONSTRAINT pk_orders PRIMARY KEY (order_id),
    CONSTRAINT fk_orders_customer FOREIGN KEY (customer_id)
       REFERENCES customers (customer_id)
);
DROP TABLE ORDERS;

CREATE TABLE order_items (
    order_item_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    order_id      NUMBER NOT NULL,
    product_name  VARCHAR2(100),
    qty           NUMBER,
    created_at    DATE DEFAULT SYSDATE,
    CONSTRAINT pk_order_items PRIMARY KEY (order_item_id),
    CONSTRAINT fk_order_items_order FOREIGN KEY (order_id)
       REFERENCES orders (order_id)
);
DROP TABLE ORDER_ITEMS;

CREATE TABLE audit_log (
    audit_id       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    table_name     VARCHAR2(50),
    pk_value       VARCHAR2(100),
    changed_data   VARCHAR2(4000),
    operation_type CHAR(1),
    change_time    TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
    CONSTRAINT pk_audit_log PRIMARY KEY (audit_id)
);
DROP TABLE AUDIT_LOG;

CREATE OR REPLACE TRIGGER trg_customers_audit
BEFORE INSERT OR UPDATE OR DELETE ON customers
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'CUSTOMERS',
          TO_CHAR(:NEW.customer_id),
          'full_name=' || :NEW.full_name || ', status_code=' || :NEW.status_code || ', created_at=' ||
              TO_CHAR(:NEW.created_at, 'YYYY-MM-DD HH24:MI:SS'),
          'I'
        );
    ELSIF UPDATING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'CUSTOMERS',
          TO_CHAR(:OLD.customer_id),
          'full_name=' || :OLD.full_name || ', status_code=' || :OLD.status_code || ', created_at=' ||
              TO_CHAR(:OLD.created_at, 'YYYY-MM-DD HH24:MI:SS'),
          'U'
        );
    ELSIF DELETING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'CUSTOMERS',
          TO_CHAR(:OLD.customer_id),
          'full_name=' || :OLD.full_name || ', status_code=' || :OLD.status_code || ', created_at=' ||
              TO_CHAR(:OLD.created_at, 'YYYY-MM-DD HH24:MI:SS'),
          'D'
        );
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_orders_audit
BEFORE INSERT OR UPDATE OR DELETE ON orders
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'ORDERS',
          TO_CHAR(:NEW.order_id),
          'customer_id=' || :NEW.customer_id || ', order_date=' || TO_CHAR(:NEW.order_date, 'YYYY-MM-DD HH24:MI:SS') ||
              ', comment_text=' || :NEW.comment_text || ', amount=' || :NEW.amount,
          'I'
        );
    ELSIF UPDATING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'ORDERS',
          TO_CHAR(:OLD.order_id),
          'customer_id=' || :OLD.customer_id || ', order_date=' || TO_CHAR(:OLD.order_date, 'YYYY-MM-DD HH24:MI:SS') ||
              ', comment_text=' || :OLD.comment_text || ', amount=' || :OLD.amount,
          'U'
        );
    ELSIF DELETING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'ORDERS',
          TO_CHAR(:OLD.order_id),
          'customer_id=' || :OLD.customer_id || ', order_date=' || TO_CHAR(:OLD.order_date, 'YYYY-MM-DD HH24:MI:SS') ||
              ', comment_text=' || :OLD.comment_text || ', amount=' || :OLD.amount,
          'D'
        );
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_order_items_audit
BEFORE INSERT OR UPDATE OR DELETE ON order_items
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'ORDER_ITEMS',
          TO_CHAR(:NEW.order_item_id),
          'order_id=' || :NEW.order_id || ', product_name=' || :NEW.product_name || ', qty=' || :NEW.qty ||
              ', created_at=' || TO_CHAR(:NEW.created_at, 'YYYY-MM-DD HH24:MI:SS'),
          'I'
        );
    ELSIF UPDATING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'ORDER_ITEMS',
          TO_CHAR(:OLD.order_item_id),
          'order_id=' || :OLD.order_id || ', product_name=' || :OLD.product_name || ', qty=' || :OLD.qty ||
              ', created_at=' || TO_CHAR(:OLD.created_at, 'YYYY-MM-DD HH24:MI:SS'),
          'U'
        );
    ELSIF DELETING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'ORDER_ITEMS',
          TO_CHAR(:OLD.order_item_id),
          'order_id=' || :OLD.order_id || ', product_name=' || :OLD.product_name || ', qty=' || :OLD.qty ||
              ', created_at=' || TO_CHAR(:OLD.created_at, 'YYYY-MM-DD HH24:MI:SS'),
          'D'
        );
    END IF;
END;
/
